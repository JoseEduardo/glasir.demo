/******************************************************************************
 * Gradle project and sub-project setup calls
 *****************************************************************************/

apply plugin: 'groovy'

def javaTasks = ['compileJava', 'jar','processResources','classes','compileTestJava','processTestResources',
 'testClasses', 'build', 'test','check', 'assemble']
 
javaTasks.each {
  //tasks.getByName(it).enabled = false 
}

//gradle.projectsEvaluated { g ->
//  tasks.each { task -> 
//    task.dependsOn(getTasksByName(task.name, true) - task)
//  }
//  javaTasks.each {
//    def t = tasks.getByName(it)
//    t.dependsOn(getTasksByName(it, true) - t)
//  }
//}

//the below is a list of test drivers for the geb web testing framework.
//a driver can emulate a specific browser and excercise the application UI.
//the htmlunit driver is a headless driver suitable for CI testing of the application UI
//See http://www.gebish.org/manual/current/configuration.html#driver_implementation
//for more details
//available drivers: htmlunit, firefox, ie, chrome, android                
ext.drivers = ['htmlunit']

allprojects {  
  project.ext.isBuildProject = file("$projectDir/src").isDirectory()
  if (!project.isBuildProject) {    
    return
  }
  
  apply plugin: 'groovy'

  repositories {
    maven {
      credentials.username artifactoryReader
      credentials.password artifactoryReaderPwd
      url "$artifactoryReaderUrl/glasir"
    }
  }

  dependencies {
    compile     "org.codehaus.groovy:groovy:1.7.10"   
    testCompile "junit:junit:4.8.2", 
                "org.spockframework:spock-core:0.5-groovy-1.7",
                "org.codehaus.geb:geb-spock:0.6.1",
                "org.codehaus.geb:geb-junit4:0.6.1"

    drivers.each { driver ->
      testCompile "org.seleniumhq.selenium:selenium-${driver}-driver:2.9.0"
    }

    testRuntime "org.seleniumhq.selenium:selenium-support:2.9.0"
  }
  
  sourceCompatibility = "1.6"
  targetCompatibility = "1.6"
  
  compileJava {
    options.compilerArgs = ['-Xlint:deprecation'] //, '-Xlint:unchecked']
  }

  drivers.each { driver -> 
    task "${driver}Test"(type: Test) {
      //force geb tests to run even when executing repeated builds
      outputs.upToDateWhen { 
        def gebSpecs = fileTree(dir: project.projectDir, include: '**/*GebSpec.class')
        //if we have geb specs in this project, consider the htmlunitTest task and its siblings
        //never "up to date" forcing the geb tests to run every time the task is called
        return !(gebSpecs.files)
      }

      ext.isWebTest = true
      include '**/*GebSpec.class'
      
      
      testReportDir = file("${reporting.baseDir}/geb-tests")
      testResultsDir = file("$buildDir/geb-test-results/")
  
      systemProperty "geb.build.reportsDir", "${reporting.baseDir}/$name/geb"
      systemProperty "geb.env", driver
      
      //TODO: Externalize the below host/port configuration somehow
      systemProperty "geb.build.baseUrl", 'http://localhost:10080'
      
      ext.reportLocationLogged = false
      afterTest { 
        if (didWork && !ext.reportLocationLogged) {
          println "> Geb report written to: ${rootProject.relativePath(testReportDir)}/index.html"
          ext.reportLocationLogged = true
        }
      }
    }  
  }

  jar  {
    //only create a jar file if we have some classes to jar up, 
    //to to this we check if the 'compileJava' task did any work (if so, we have something
    //to jar up). TODO: if we need to create resources-only jars, this needs changing
    onlyIf {
      compileJava.didWork || processResources.didWork || compileGroovy.didWork
    }

    // Change where the resulting jar will end up
    destinationDir = file("lib")
    baseName = 'classes'
  }

  test {
    exclude '**/*GebSpec.class'
  }

  task deleteBuildJars(type: Delete) {
    tasks.withType(Jar).each { jarTask ->
      delete << jarTask.archivePath
    }
  }

  task deleteLibDirIfEmpty(dependsOn: ['deleteBuildJars']) {
    def dir = file('lib')

    //only delete the lib dir if it doesn't contain any files after we delete the classes.jar and resources.jar
    onlyIf { !dir.listFiles() && dir.isDirectory() }

    doLast {
      //symlink safe delete
      glasir.deleteDir dir
    }
  }

  clean.dependsOn 'deleteLibDirIfEmpty'
}

subprojects {
  if (!project.isBuildProject) return

  apply plugin: 'glasir.build'

  group = glasir.projectGroup

  //configures dependencies for this project based on the atg MANIFEST.MF file
  //ATG-Required attribute values. Applies these dependencies to the configurations
  //given as the second argument
  glasir {
    useGroovyInCompileClasspath true
    atgDependencies {
      applyToConfigurations "compile", "testCompile"      
      verbose false
    }
  }
}

//make the clean task symlink-safe
task clean(overwrite: true) {
//clean {
  dependsOn allprojects.findAll { 
    it != rootProject && it.tasks.findByName('clean')
  }.collect { 
    it.clean 
  }

  doLast {
    glasir.deleteDir "$rootDir/build"
  }
}

task aggregateTestReports(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects.findAll { it.isBuildProject }.collect { it.test }

    doLast { 
      if (didWork) {
        println "> "
        println "> Aggregated test report saved at file://$destinationDir/index.html"
        println "> "
      }
    }
}
build.dependsOn aggregateTestReports