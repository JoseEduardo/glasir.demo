import com.iteego.glasir.build.tasks.*

/*****************************************************************************
 * Ear assembling tasks.
 *
 * NOTE: The default behavior for a ear task is 'release'
 * or 'production' behavior. We've made the development setup a special case
 * and there is a special task 'enableDevSettings' which you need to add
 * first in your dependsOn chain if you want to call the ear tasks and have
 * them generate dev enabled EAR files
 *
 *
 * Available attributes and their defaults:
 *
 *   File    outputFile - the ear file to be created
 *           default: none
 *   String  modules - names of the atg modules to assemble
 *           default: none
 *   boolean standalone - whether or not to include atg in the ear
 *           default: false
 *   boolean overwrite - whether to overwrite if exploded ear is present
 *           default: true
 *   boolean pack - whether to pack the resulting exploded dir into an archive
 *           default: true
 *   ConfigurableFileCollection searchRootDirs - where to search for modules
 *           when assembling the ear. You can create a custom one using something
 *           like "searchRootDirs = files('pathOne', 'pathTwo')"
 *           default: uses the configured atgRoot and the root of the source
 *                    control dir tree as search roots
 *   boolean loggingDebug - enable debug logging on the atg assembler
 *           default: false
 *
 *
 */

task atgCoreSqlInstallationOrder << {
  description = "Displays build/install/sql ordering for ATG core modules."
  printAtgCoreSqlInstallationOrder()
}

task assembleStoreEar(type: AtgAssemblerTask, description: "Runs a build and assembles a release storefront ear") {
  dependsOn = [":clean", ":build"]

  modules = allEnvironmentModules
  outputFile = storeEar
  standalone = true
  liveconfig = true
  pack = true
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      file("${globalDir}/config/atg").eachDir { from it }
      into "${storeEar.canonicalPath}.exploded/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleAdminEar(type: AtgAssemblerTask, description: "Runs a build and assembles a release admin ear") {
  dependsOn = [":clean", ":build"]

  modules = allEnvironmentModules
  outputFile = adminEar
  standalone = true
  liveconfig = true
  pack = true
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      file("${globalDir}/config/atg").eachDir { from it }
      into "${storeEar.canonicalPath}.exploded/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

subprojects.each { subproject ->
  dependsOn(subproject.path)
}

task assembleDevStoreEar(type: AtgAssemblerTask) {
  dependsOn "build"
  
  modules = allEnvironmentModules
  outputFile = storeEar
  standalone = true
  liveconfig = true
  pack = false
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      file("${globalDir}/config/atg").eachDir { from it }
      into "${storeEar.canonicalPath}/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleDevAdminEar(type: AtgAssemblerTask) {
  dependsOn = [":build"]

  modules = ['DAS'] //TODO: work out the admin node structure
  outputFile = adminEar
  standalone = true
  liveconfig = true
  pack = false
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      file("${globalDir}/config/atg").eachDir { from it }
      into "${storeEar.canonicalPath}/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task setupDevServer(type: Sync, description: "Creates a dev server setup in your jboss installation") {
  from "$jbossRoot/server/default"
  from "$globalDir/config/jboss/storefront/development"
  into "$jbossRoot/server/${store}"
}

task jsp(type: Sync, description: "A fast sync of jsp files only into a (running) jboss node") {
  from "$globalDir/MyBrand/Consumer/Webapp/j2ee-apps/Storefront/store.war"
  into "$jbossRoot/server/${store}/deploy/${storeEarName}/storefront.war"
}


task syncStoreEar(type: Sync) {
  from storeEar
  into "$jbossRoot/server/${store}/deploy/${storeEarName}"
}

task syncAdminEar(type: Sync) {
  from adminEar
  into "$jbossRoot/server/${admin}/deploy/${adminEarName}"
}

task syncDocRoot(type: Sync) {
  from docRoot
  into "$jbossRoot/server/${store}/deploy/ROOT.war"
}

task devDeployStore {
  description = "Compiles, tests, assemble, and deploys the dev store ear file to jboss"  
  dependsOn = [assembleDevStoreEar, setupDevServer, syncStoreEar, syncDocRoot]
}

task devDeployAdmin { 
  description = "Compiles, tests, assemble, and deploys the dev store ear file to jboss"  
  dependsOn = [assembleDevAdminEar, setupDevServer, syncAdminEar]
}

task devDeploy {
  description = "Compiles, tests, assembles, and deploys dev store and admin ears to jboss"  
  dependsOn = [devDeployStore] //, devDeployAdmin]
}

task cleanAll(dependsOn: [':clean']) << {
  description = "Cleans out all the 'build' directories in the source tree _AND_ the jboss server dirs"
  delete("$jbossRoot/server/${store}")
  delete("$jbossRoot/server/${admin}")
}

String getAllEnvironmentModules() {
  moduleMap.keySet().findAll( { it.startsWith('env.') || it.equals('env') } ).join( " " )
}