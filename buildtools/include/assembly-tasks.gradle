import com.iteego.glasir.build.tasks.*

/*****************************************************************************
 * Ear assembling tasks.
 *
 * NOTE: The default behavior for a ear task is 'release'
 * or 'production' behavior. We've made the development setup a special case
 * and there is a special task 'enableDevSettings' which you need to add
 * first in your dependsOn chain if you want to call the ear tasks and have
 * them generate dev enabled EAR files
 *
 *
 * Available attributes and their defaults:
 *
 *   File    outputFile - the ear file to be created
 *           default: none
 *   String  modules - names of the atg modules to assemble
 *           default: none
 *   boolean standalone - whether or not to include atg in the ear
 *           default: false
 *   boolean overwrite - whether to overwrite if exploded ear is present
 *           default: true
 *   boolean pack - whether to pack the resulting exploded dir into an archive
 *           default: true
 *   ConfigurableFileCollection searchRootDirs - where to search for modules
 *           when assembling the ear. You can create a custom one using something
 *           like "searchRootDirs = files('pathOne', 'pathTwo')"
 *           default: uses the configured atgRoot and the root of the source
 *                    control dir tree as search roots
 *   boolean loggingDebug - enable debug logging on the atg assembler
 *           default: false
 *
 *
 */

task atgCoreSqlInstallationOrder << {
  description = "Displays build/install/sql ordering for ATG core modules."
  printAtgCoreSqlInstallationOrder()
}

task assembleReleaseEar(type: AtgAssemblerTask, description: "Runs a build and assembles a release storefront ear") {
  dependsOn = ["clean", "build"]

  modules = allEnvironmentModules
  outputFile = bigEar
  standalone = true
  liveconfig = true
  pack = true
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      //TODO: Fix the config/atg dir structure for release ears
      file("${globalDir}/config/atg").eachDir { from it }
      into "${bigEar.canonicalPath}.exploded/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleDevEar(type: AtgAssemblerTask) {
  dependsOn "build"
  
  modules = allEnvironmentModules
  outputFile = bigEar
  standalone = true
  liveconfig = false
  pack = false
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      //file("${globalDir}/config/atg").eachDir { from it }
      from "${globalDir}/config/atg"
      into "${bigEar.canonicalPath}/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task syncStoreEar(type: Copy) {
  dependsOn = [assembleDevEar]
  from bigEar
  into "$jbossRoot/server/$storeServerName/deploy/${bigEarName}"
}

task syncAdminEar(type: Copy) {
  dependsOn = [assembleDevEar]
  println "ADMIN JBOSS SERVER NOT SET UP YET - GLASIR-50"
  //from storeEar
  //into "$jbossRoot/server/${store}/deploy/${storeEarName}"
}

task syncStoreServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  from("$jbossRoot/server/default")
  from "$globalDir/config/jboss/storefront/development"
  into "$jbossRoot/server/$storeServerName"
}

task syncAdminServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  println "ADMIN JBOSS SERVER NOT SET UP YET - GLASIR-50"
  //from "$jbossRoot/server/default"
  //from "$globalDir/config/jboss/storefront/development"
  //into "$jbossRoot/server/${store}"
}

task syncDocRoot(type: Copy) {
  from docRoot
  into "$jbossRoot/server/${storeServerName}/deploy/ROOT.war"
}


//TODO: Fix the jsp task
task jsp(type: Copy, description: "A fast sync of jsp files only into a (running or not) jboss node") {
  from "$globalDir/MyBrand/Consumer/Webapp/j2ee-apps/Storefront/store.war"
  into "$jbossRoot/server/${storeServerName}/deploy/${bigEarName}/storefront.war"
}
 
task syncStore(dependsOn: [syncStoreEar, syncStoreServer, syncDocRoot])

task syncAdmin(dependsOn: [syncAdminEar, syncAdminServer])

task devDeploy {
  description = "Compile, test, assemble, and deploys the dev ear to jboss"  
  dependsOn = [assembleDevEar, syncStore, syncAdmin]
}

task ciDeploy {
  description = "Compile, test, assemble, and deploys the dev ear to jboss"  
  dependsOn = [syncStore, syncAdmin]
}

task cleanAll(dependsOn: ['clean']) << {
  description = "Cleans out all the 'build' directories in the source tree _AND_ the jboss server dirs"
  delete("$jbossRoot/server/${storeServerName}")
  delete("$jbossRoot/server/${adminServerName}")
}

String getAllEnvironmentModules() {
  moduleMap.keySet().findAll( { it.startsWith('env.') || it == 'env' } ).sort().join( " " )
}