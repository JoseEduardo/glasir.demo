/******************************************************************************
 * Gradle project and sub-project setup calls
 *****************************************************************************/

allprojects {
  apply plugin: 'groovy'
    
  dependencies {
    groovy "org.codehaus.groovy:groovy:1.8.4"

    compile  "junit:junit:4.8.2", 
              "org.mockito:mockito-all:1.8.5"

    //settings for geb/spock/selenium
    def junitVersion = "4.8.2"
    def gebVersion = "0.6.1"
    def spockVersion = "0.6-groovy-1.8-SNAPSHOT"
    def seleniumVersion = "2.9.0"

    //TODO: investigate if we can use spock 0.5-groovy-1.8 and move to groovy 1.8
    // If using Spock, need to depend on geb-spock
    testCompile "org.codehaus.geb:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.codehaus.geb:geb-junit4:$gebVersion"
    testCompile "junit:junit-dep:$junitVersion"

    // The drivers we want to use
    drivers = ["htmlunit"] //, "firefox", "chrome"]

    // Need a driver implementation
    drivers.each { driver ->
      testCompile "org.seleniumhq.selenium:selenium-${driver}-driver:$seleniumVersion"
    }
    testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

  }

  sourceCompatibility = "1.6"
  targetCompatibility = "1.6"
  
  compileJava {
    options.compilerArgs = ['-Xlint:deprecation'] //, '-Xlint:unchecked']
  }
}

subprojects {
  // set the maven 'group' for the sub project,
  group = getProjectGroup(project, true)

  setupAtgDependencies(project, ['compile', 'testCompile'])

  task print << {
    printTree(project)
  }

  jar  {
    //only create a jar file if we have some classes to jar up, 
    //to to this we check if the 'compileJava' task did any work (if so, we have something
    //to jar up). TODO: if we need to create resources-only jars, this needs changing
    onlyIf {
      compileJava.didWork || processResources.didWork || compileGroovy.didWork
    }

    // Change where the resulting jar will end up
    destinationDir = file("lib")
    baseName = 'classes'
  }
      
  clean << {
    ant.delete file: 'lib/classes.jar'
    if (!file('lib').listFiles()) {
      ant.delete dir: 'lib'
    }
  }
}


task aggregateTestReports(type: TestReportAggregator, dependsOn: test) {
    testReportDir = file("${reportsDir}/tests")
    testResultsDir = file("${buildDir}/test-results")
    projects = subprojects
}
build.dependsOn(aggregateTestReports)

gradle.projectsEvaluated { g ->
  build.dependsOn(getTasksByName('build', true) - build)
  clean.dependsOn(getTasksByName('clean', true) - clean)
}

class TestReportAggregator extends Copy {
    def projects
    File testResultsDir
    
    @OutputDirectory
    File testReportDir
    
    def TestReportAggregator() {
        dependsOn { testTasks }
        from { inputTestResultDirs }
        into { testResultsDir }
    }

    @TaskAction
    def aggregate() {
        def report = new org.gradle.api.internal.tasks.testing.junit.report.DefaultTestReport(testReportDir: testReportDir, testResultsDir: testResultsDir)
        report.generateReport()
    }

    def getTestTasks() {
        projects.collect { it.tasks.withType(Test) }.flatten()
    }

    def getInputTestResultDirs() {
        testTasks*.testResultsDir
    }
}