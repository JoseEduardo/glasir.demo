import com.iteego.glasir.build.tasks.*

/*
Starts a hsql instance in the gradle java process. It starts the instance 
in a mode where the connecting url creates the database if it doesn't already 
exists. Example connection URLS:
 
jdbc:hsqldb:hsql://localhost/myalias;file:C:/files/mydatabase
jdbc:hsqldb:hsql://localhost/myalias;mem:test;sql.enforce_types=true
jdbc:hsqldb:hsql://localhost/myalias;filepath=file:C:/files/mydatabase
*/
task startDatabase(type: HsqlDb) {}

/*
You can invoke any specific flavor of the "env.store.dev" module by adding the parameter
  "-Pflavor=FlavorName" or "--project-prop flavor=FlavorName"
To your "gradle startDevStore" command. Usually, module flavors are used for different database types,
  for example, use "gradle startDevStore -Pflavor=oracle" to bypass the default h2 database choice.
*/
task startDevStore(type: RunAtgOnJBoss, dependsOn: []) {
//task startDevStore(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossRoot     jbossRoot
  serverName    storeServerName
  modules       project.hasProperty("flavor") && ["oracle","hsql-mem","hsql-file"].contains(project.getProperty("flavor")) ? "env.store.dev." + project.getProperty("flavor") : "env.store.dev"
}

/*
You can invoke any specific flavor of the "env.admin.dev" module by adding the parameter
  "-Pflavor=FlavorName" or "--project-prop flavor=FlavorName"
To your "gradle startDevStore" command. Usually, module flavors are used for different database types,
  for example, use "gradle startDevAdmin -Pflavor=oracle" to bypass the default h2 database choice.
*/
task startDevAdmin(type: RunAtgOnJBoss, dependsOn: []) {
//task startDevAdmin(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossRoot     jbossRoot
  serverName    adminServerName
    modules       project.hasProperty("flavor") && ["oracle","hsql-mem","hsql-file"].contains(project.getProperty("flavor")) ? "env.admin.dev." + project.getProperty("flavor") : "env.admin.dev"
}

task startCiStore(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossRoot     jbossRoot
  serverName    storeServerName
  modules       "env.store.dev"
  async         true
}

task verifyCiStore(type: Tail, dependsOn: [startCiStore]) {
  file         "$jbossRoot/server/$storeServerName/log/console.log"
  failOn       regex: "ERROR[ ]*\\[", postFireTailPeriod: "5 seconds"
  succeedOn    "INFO[ ]*\\[org\\.jboss\\.bootstrap\\.microcontainer\\.ServerImpl\\].*JBoss \\(Microcontainer\\) \\[.*\\] Started in"
  timeoutAfter "5 minutes"
}

task startCiAdmin(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossRoot     jbossRoot
  serverName    adminServerName
  modules       "env.admin.dev"
  async         true
}

task verifyCiAdmin(type: Tail, dependsOn: [startCiAdmin]) {
  file         "$jbossRoot/server/$adminServerName/log/console.log"
  failOn       regex: "ERROR[ ]*\\[", postFireTailPeriod: "5 seconds"
  succeedOn    "INFO[ ]*\\[org\\.jboss\\.bootstrap\\.microcontainer\\.ServerImpl\\].*JBoss \\(Microcontainer\\) \\[.*\\] Started in"
  timeoutAfter "5 minutes"
}
