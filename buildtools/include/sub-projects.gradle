/******************************************************************************
 * Gradle project and sub-project setup calls
 *****************************************************************************/

allprojects {
  apply plugin: 'groovy'
    
  dependencies {
    groovy "org.codehaus.groovy:groovy:1.7.10"

    testCompile "junit:junit:4.8.2", 
                "org.spockframework:spock-core:0.5-groovy-1.7",
                "org.codehaus.geb:geb-spock:0.6.1",
                "org.codehaus.geb:geb-junit4:0.6.1",
                "org.seleniumhq.selenium:selenium-htmlunit-driver:2.9.0"

    testRuntime "org.seleniumhq.selenium:selenium-support:2.9.0"
  }

  sourceCompatibility = "1.6"
  targetCompatibility = "1.6"
  
  compileJava {
    options.compilerArgs = ['-Xlint:deprecation'] //, '-Xlint:unchecked']
  }
}

subprojects {
  // set the maven 'group' for the sub project,
  group = getProjectGroup(project, true)

  setupAtgDependencies(project, ['compile', 'testCompile'])

  task print << {
    printTree(project)
  }

  jar  {
    //only create a jar file if we have some classes to jar up, 
    //to to this we check if the 'compileJava' task did any work (if so, we have something
    //to jar up). TODO: if we need to create resources-only jars, this needs changing
    onlyIf {
      compileJava.didWork || processResources.didWork || compileGroovy.didWork
    }

    // Change where the resulting jar will end up
    destinationDir = file("lib")
    baseName = 'classes'
  }

  test {
    exclude '**/*GebSpec.class'
  }

  clean << {
    ant.delete file: 'lib/classes.jar'
    if (!file('lib').listFiles()) {
      ant.delete dir: 'lib'
    }
  }
}


task aggregateTestReports(type: TestReportAggregator, dependsOn: subprojects.check) {
  testReportDir = file("${reportsDir}/tests")
  testResultsDir = file("${buildDir}/test-results")
  projects = subprojects
  doLast {
    println "> "
    println "> Aggregated test report saved at $testReportDir/index.html"
    println "> "
  }    
}
build.dependsOn(aggregateTestReports)

gradle.projectsEvaluated { g ->
  build.dependsOn(getTasksByName('build', true) - build)
  clean.dependsOn(getTasksByName('clean', true) - clean)
}

class TestReportAggregator extends Copy {
    def projects
    File testResultsDir
    
    @OutputDirectory
    File testReportDir
    
    def TestReportAggregator() {
        dependsOn { testTasks }
        from { inputTestResultDirs }
        into { testResultsDir }
    }

    @TaskAction
    def aggregate() {
        def report = new org.gradle.api.internal.tasks.testing.junit.report.DefaultTestReport(testReportDir: testReportDir, testResultsDir: testResultsDir)
        report.generateReport()
    }

    def getTestTasks() {
        projects.collect { it.tasks.withType(Test) }.flatten()
    }

    def getInputTestResultDirs() {
        testTasks*.testResultsDir
    }
}