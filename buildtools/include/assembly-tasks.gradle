import com.iteego.glasir.build.tasks.*

task atgCoreSqlInstallationOrder << {
  description = "Displays build/install/sql ordering for ATG core modules."
  printAtgCoreSqlInstallationOrder()
}

task assembleReleaseEar(type: AtgAssemblerTask, description: "Runs a build and assembles a release storefront ear") {
  dependsOn = ["clean", "build"]

  modules = allEnvironmentModules
  outputFile = bigEar
  standalone = true
  liveconfig = true
  pack = true
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      //TODO: Fix the config/atg dir structure for release ears
      file("${globalDir}/config/atg").eachDir { from it }
      into "${bigEar.canonicalPath}.exploded/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleDevEar(type: AtgAssemblerTask) {
  dependsOn "build"
  
  modules = allEnvironmentModules
  outputFile = bigEar
  standalone = true
  liveconfig = false
  pack = false
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      //file("${globalDir}/config/atg").eachDir { from it }
      from "${globalDir}/config/atg"
      into "${bigEar.canonicalPath}/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task syncStoreEar(type: Copy) {
  from bigEar
  into "$jbossRoot/server/$storeServerName/deploy/${bigEarName}"
}

task syncAdminEar(type: Copy) {
  from bigEar
  into "$jbossRoot/server/$adminServerName/deploy/${bigEarName}"
}

task syncStoreServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  from("$jbossRoot/server/default")
  from "$globalDir/config/jboss/store/dev"
  into "$jbossRoot/server/$storeServerName"
}

task syncAdminServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  from "$jbossRoot/server/default"
  from "$globalDir/config/jboss/admin/dev"
  into "$jbossRoot/server/$adminServerName"
}

task syncDocRoot(type: Copy) {
  from docRoot
  into "$jbossRoot/server/${storeServerName}/deploy/ROOT.war"
}


//TODO: Fix the jsp task
task jsp(type: Copy, description: "A fast sync of jsp files only into a (running or not) jboss node") {
  from "$globalDir/MyBrand/Consumer/Webapp/j2ee-apps/store/store.war"
  into "$jbossRoot/server/${storeServerName}/deploy/${bigEarName}/store.war"
}
 
task syncStore(dependsOn: [syncStoreEar, syncStoreServer, syncDocRoot])

task syncAdmin(dependsOn: [syncAdminEar, syncAdminServer])

task devDeploy {
  description = "Compile, test, assemble, and deploys the dev ear to jboss"  
  dependsOn = [assembleDevEar, syncStore, syncAdmin]
}

task ciDeploy {
  description = "Deploys the ear to jboss"  
  dependsOn = [syncStoreServer, syncAdminServer, syncStoreEar, syncAdminEar]
}

task cleanAll(dependsOn: ['clean']) << {
  description = "Cleans out all the 'build' directories in the source tree _AND_ the jboss server dirs"
  delete("$jbossRoot/server/${storeServerName}")
  delete("$jbossRoot/server/${adminServerName}")
}

String getAllEnvironmentModules() {
  moduleMap.keySet().findAll( { it.startsWith('env.') || it == 'env' } ).sort().join( " " )
}