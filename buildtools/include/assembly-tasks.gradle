import com.iteego.glasir.build.tasks.*

task atgCoreSqlInstallationOrder << {
  description = "Displays build/install/sql ordering for ATG core modules."
  printAtgCoreSqlInstallationOrder()
}

task assembleReleaseEar(type: AtgAssemblerTask, description: "Runs a build and assembles a release ear") {
  dependsOn = ["clean", "build"]

  modules = allEnvironmentModules
  outputFile = bigEar
  standalone = true
  liveconfig = true
  pack = true
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      //TODO: Fix the config/atg dir structure for release ears
      file("${globalDir}/config/atg").eachDir { from it }
      into "${bigEar.canonicalPath}.exploded/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleDevEar(type: AtgAssemblerTask, description: "Runs a build and assembles a development ear") {
  dependsOn "build"
  
  modules = allEnvironmentModules
  outputFile = file("$jBossRoot/server/$storeServerName/deploy/${bigEarName}")
  standalone = true
  liveconfig = false
  pack = false
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false
  //TODO: Fix the below hack somehow...
  searchRootDirs = files("$atgRoot", "$globalDir/packages/modules", "$globalDir/packages","$globalDir")
  
  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      //file("${globalDir}/config/atg").eachDir { from it }
      from "${globalDir}/config/atg"
      into "${bigEar.canonicalPath}/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleLinkedEar(type: AtgAssemblerTask) {
    dependsOn "build"

    modules = allEnvironmentModules
    outputFile = bigEar
    standalone = true
    liveconfig = false
    pack = false
    extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
    loggingDebug = false

    doAfterAssembly {
        def mainAppDir = new File("${globalDir}/glasir-app")

        // Link all top-level application modules from source tree
        def destinationDir = "$bigEar.canonicalPath/atg_bootstrap.war/WEB-INF/ATG-INF"
        mainAppDir.eachDir {
            if (!it.name.equals("META-INF")) {
                def linkName = "$destinationDir/$it.name"
                def result = ant.symlink( link: linkName, action: "delete")
                if (!result) {
                  file(linkName).deleteDir()
                }
                ant.symlink( link: linkName, resource: it.canonicalPath, overwrite: true)
            }
        }

        // Link all war webapp folders from source tree
        destinationDir = "$bigEar.canonicalPath"
        mainAppDir.eachFileRecurse {
            if (it.name.equals("MANIFEST.MF")) {
                File manifest = it
                manifest.getText().eachMatch(/ATG-Web-Module:.*/) {
                    def line = it
                    line.split(':')[1].replaceAll("^\\s+", "").replaceAll("\\s+\$", "").split(' ').each {
                        String warSourcePath = manifest.absolutePath - "META-INF/MANIFEST.MF" + it
                        String war = new File(warSourcePath).name
                        def linkName="$destinationDir/$war"
                        def result = ant.symlink( link: linkName, action: "delete")
                        if (!result) {
                          file(linkName).deleteDir()
                        }
                        ant.symlink( link: linkName, resource: warSourcePath, overwrite: true)
                    }
                }
            }
        }

        // Link all atg server directories from source tree
        //copy {
        destinationDir = "${bigEar.canonicalPath}/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
        file("${globalDir}/config/atg").eachDir {
            File atgServer = it
            def linkName="$destinationDir/${atgServer.name}"
            new File(linkName).delete()
            ant.symlink( link: linkName, resource: atgServer.canonicalPath, overwrite: true)
        }
        //  from "${globalDir}/config/atg"
        //  into "${bigEar.canonicalPath}/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
        //}
    }
}


task syncStoreEar(type: Copy) {
//  from bigEar
//  into "$jBossRoot/server/$storeServerName/deploy/${bigEarName}"
}

task linkStoreEar << {
  ant.symlink( link: "$jBossRoot/server/$storeServerName/deploy/$bigEarName", resource: bigEar.canonicalPath)
}

task syncAdminEar(type: Copy) {
  from "$jBossRoot/server/$storeServerName/deploy/${bigEarName}"
  into "$jBossRoot/server/$adminServerName/deploy/${bigEarName}"
}

task syncStoreServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  from("$jBossRoot/server/default")
  from "$globalDir/config/jboss/store/dev"
  into "$jBossRoot/server/$storeServerName"
}

task syncAdminServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  from "$jBossRoot/server/default"
  from "$globalDir/config/jboss/admin/dev"
  into "$jBossRoot/server/$adminServerName"
}

task syncDocRoot(type: Copy) {
  from docRoot
  into "$jBossRoot/server/${storeServerName}/deploy/ROOT.war"
}


//TODO: Fix the jsp task
task jsp(type: Copy, description: "A fast sync of jsp files only into a (running or not) jboss node") {
  from "$globalDir/MyBrand/Consumer/Webapp/j2ee-apps/store/store.war"
  into "$jBossRoot/server/${storeServerName}/deploy/${bigEarName}/store.war"
}
 
task syncStore(dependsOn: [syncStoreEar, syncStoreServer, syncDocRoot])

task syncAdmin(dependsOn: [syncAdminEar, syncAdminServer])

task devDeploy {
  description = "Compile, test, assemble, and deploys the dev ear to jboss"  
  dependsOn = [assembleDevEar, syncStore, syncAdmin]
}

task ciDeploy {
  description = "Compile, test, assemble, and deploys the release ear to jboss"
  dependsOn = [assembleReleaseEar, syncStore, syncAdmin]
}

task cleanLocalDatabase(dependsOn: ['clean']) << {
  description = "Cleans out the local database, if any"
  delete(databaseDir)
}

task cleanJbossServers(dependsOn: ['clean']) << {
  description = "Cleans out the jboss server dirs"
  delete("$jBossRoot/server/${storeServerName}")
  delete("$jBossRoot/server/${adminServerName}")
}

task cleanAll(dependsOn: ['clean','cleanJbossServers','cleanLocalDatabase']) << {
  description = "Cleans out all the 'build' directories in the source tree, the jboss server dirs and the local database, if any"
}

String getAllEnvironmentModules() {
  moduleMap.keySet().findAll( { it.startsWith('env.') || it == 'env' } ).sort().join( " " )
}
