
import groovy.xml.MarkupBuilder

ext { 
  tableNamePattern = /([^"\s']+)/
  //alter table dps_contact_info modify (phone_number varchar2(40))...
  alterTablePattern = /(?is)alter\s+table\s+${tableNamePattern}\s+modify\s+\((.+)\)/
  //create or replace procedure dms_queue_flag...
  createProcedurePattern = /(?is)\s*create(?:\s+or\s+replace)\s+?procedure\s+${tableNamePattern}/
  //alter session set NLS_LENGTH_SEMANTICS='CHAR'...
  alterSessionPattern = /(?is)alter\s+session\s+set/
}

task format { 
  doLast { 
    def inSql = file('packages/ATG10.0.2//CommerceReferenceStore/Store/EStore/sql/db_components/oracle/crs_profile_ddl.sql')
    //def inSql = file('packages/ATG10.0.2//BIZUI/sql/install/oracle/bizui_all_ddl.sql')
    def outXml = file("sample.xml")
    createH2ChangeSetFromOacleSql(inSql, outXml, "001002-some-id", "kmb", "some-context")
  }
}

def createH2ChangeSetFromOacleSql(File oracleSqlIn, File xmlFileOut, String id, String author, String context) {
  def writer = new StringWriter()
  def indentPrinter = new IndentPrinter(writer, '  ', true)
  
  def xml = new MarkupBuilder(indentPrinter)
  xml.doubleQuotes = true
  
  def schemaLocation = ["http://www.liquibase.org/xml/ns/dbchangelog",
                      "http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd",
                      "http://www.liquibase.org/xml/ns/dbchangelog-ext",
                      "http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"].join(' ')

  xml.mkp.xmlDeclaration(version: '1.0', encoding: 'UTF-8')

  def sqlData = massageOracleSqlToWorkInH2(oracleSqlIn.text)

  xml.databaseChangeLog('xmlns':              "http://www.liquibase.org/xml/ns/dbchangelog", 
                        'xmlns:xsi':          "http://www.w3.org/2001/XMLSchema-instance",
                        'xmlns:ext':          "http://www.liquibase.org/xml/ns/dbchangelog-ext",
                        'xsi:schemaLocation': schemaLocation) {

    changeSet(id: id, author: author, context: context) {
      mkp.yieldUnescaped "<!CDATA[\n$sqlData\n]]>\n  " 
    }
  }

  xmlFileOut.text = writer.toString()
  println "XML change set written to $xmlFileOut"
}

/*

o 
o Remove stored procedures
o Rewrite alter table from "alter table X modify (...)" to "alter table X alter ..."
o Remove alter session statements 

*/
String massageOracleSqlToWorkInH2(String oracleSqlText) {
  StringBuilder result = new StringBuilder()

  removeCreateProcedureStatements(oracleSqlText).tokenize(';').each { statement -> 
    def cleanLines = statement.readLines().collect { it.trim() }.findAll { it }
    //statement with only newlines, skip it 
    if (!cleanLines) return
    result << "\n\n"

    def cleanStatement = cleanLines.findAll { !it.startsWith('--')}.join ('\n')
    //println "STATEMENT: '$statement'"

    def m = (cleanStatement =~ alterTablePattern)
    if (m) {
      result << "alter table ${m[0][1]} alter column ${m[0][2]};"
      return
    }

    if (cleanStatement =~ alterSessionPattern) return

    result << "${statement.trim()};"  
  }

  result
}

String removeCreateProcedureStatements(String sqlData) {
  boolean skipLines = false
  StringBuffer tmp = new StringBuffer()
  sqlData.readLines().each { line ->     
    if (line =~ createProcedurePattern) {
      //println "Match found on '$line'"
      skipLines = true
      return
    }

    if (line == '/') {
      skipLines = false
      return
    }

    if (skipLines) return 

    tmp << line << '\n'
  }
  
  tmp
}