import com.iteego.glasir.build.tasks.*

/*
Starts a h2 instance in the gradle java process. It starts the instance 
in a mode where the connecting url creates the database if it doesn't already 
exists. Example connection URLS:
 
Example url pattern for connecting to the database instance
started by the below task:

jdbc:h2:tcp://localhost/<database_name>

as in:

jdbc:h2:tcp://localhost/glasir_pub

*/
task startDatabase(type: H2) {
  baseDir databaseDir
  tcpAllowOthers true
  tcp true     //default, here for clarity. Starts the db server
  tcpPort 9092 //default, here for clarity
  web true     //starts the web console`
  webPort 9093
  //http://www.h2database.com/javadoc/org/h2/constant/SysProperties.html#h2.serverCachedObjects
  System.properties['h2.serverCachedObjects'] = '2048'
}

task startDbAndSleep( dependsOn: 'startDatabase') {
  doLast {sleep(1800000)}
 }

/*
You can invoke any specific flavor of the "env.store.dev" module by adding the parameter
  "-Pflavor=FlavorName" or "--project-prop flavor=FlavorName"
To your "gradle startDevStore" command. Usually, module flavors are used for different database types,
  for example, use "gradle startDevStore -Pflavor=oracle" to bypass the default h2 database choice.
*/
task startDevStore(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossHome     jBossRoot
  serverName    storeServerName
  modules       moduleWithFlavors("env.CRSDemo.store.dev")

  doFirst { 
    println "Starting dev store node with modules: ${modules}"
  }
}

task startBareDevStore(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossHome     jBossRoot
  serverName    storeServerName
  modules       moduleWithFlavors("env.BareCommerce.store.dev")
  
  doFirst { 
    println "Starting bare dev store node with modules: ${modules}"
  }
}

/*
You can invoke any specific flavor of the "env.admin.dev" module by adding the parameter
  "-Pflavor=FlavorName" or "--project-prop flavor=FlavorName"
To your "gradle startDevStore" command. Usually, module flavors are used for different database types,
  for example, use "gradle startDevAdmin -Pflavor=oracle" to bypass the default h2 database choice.
*/
task startDevAdmin(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossHome     jBossRoot
  serverName    adminServerName
  modules       moduleWithFlavors("env.CRSDemo.admin.dev")
  
  doFirst { 
    println "Starting dev admin node with modules: ${modules}"
  }
}

task startCiStore(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
    jBossHome     jBossRoot
    serverName    storeServerName
    modules       moduleWithFlavors("env.CRSDemo.store.dev")
    async         true
}

task verifyCiStore(type: Tail, dependsOn: [startCiStore]) {
  file         "$jBossRoot/server/$storeServerName/log/console.log"
  failOn       regex: "ERROR[ ]*\\[", postFireTailPeriod: "5 seconds"
  succeedOn    "INFO.*JBoss \\(Microcontainer\\) \\[.*\\] Started in"
  timeoutAfter "5 minutes"
}

task startCiAdmin(type: RunAtgOnJBoss, dependsOn: []) {
  jBossHome     jBossRoot
  serverName    adminServerName
  modules       moduleWithFlavors("env.CRSDemo.admin.dev")
  async         true
}

task verifyCiAdmin(type: Tail, dependsOn: [startCiAdmin]) {
  file         "$jBossRoot/server/$adminServerName/log/console.log"
  failOn       regex: "ERROR[ ]*\\[", postFireTailPeriod: "5 seconds"
  succeedOn    "INFO.*JBoss \\(Microcontainer\\) \\[.*\\] Started in"
  timeoutAfter "5 minutes"
}

/* Ugly workaround to make stop tasks work */
task stopStore << {
    proc = "${jBossRoot}/bin/shutdown.sh -s jnp://localhost:3099 -u admin -p admin".execute()
    proc.waitFor()
}

task stopAdmin << {
    proc = "${jBossRoot}/bin/shutdown.sh -s jnp://localhost:1099 -u admin -p admin".execute()
    proc.waitFor()
}

/* This is what the stop tasks SHOULD look like
task stopAdmin(type: StopJBossInstance, dependsOn: []) {
    jBossHome     jBossRoot
    serverName    adminServerName
    jnpPort       1099
}
*/

def moduleWithFlavors(String module) {
  String result = module
  if (project.hasProperty('flavor')) {
    result += ".${project.flavor}"      
  }
  
  result
}
