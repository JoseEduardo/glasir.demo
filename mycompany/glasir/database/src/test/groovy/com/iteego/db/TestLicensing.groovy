/*
 * Copyright (c) 2011. Iteego.
 */

package com.iteego.db

import org.junit.Test
import org.junit.Assert

public class TestLicensing {

  static String PROPER_LICENSE
  static byte[] PUBLIC_KEY_BYTES
  static byte[] PROPER_SIGNATURE

  static {
    // groovy iteegoLicenseTool.groovy -a create -k key1 -l lic2 -p prod -c cust -s 2011-01-01 -e 2111-01-01
    String licenseStartDate="2011-01-01 00:00:00 CET"
    String licenseExpiryDate="2111-01-01 00:00:00 CET"
    String licenseDevelopment="false"
    String licenseLicensee="cust"
    String licenseProduct="prod"
    String licenseSignature="302C02145531238DEF566E5E19702968C755147594993C36021457E32F6F785C1DD873928CBFD715FD5163A5430F"

    TestLicensing.PROPER_LICENSE = LicenseHandler.generatePlainText(
      licenseStartDate, licenseExpiryDate, licenseLicensee, licenseProduct, Boolean.FALSE )

    println( "plain text: '${TestLicensing.PROPER_LICENSE}'")
  }

  static {
    TestLicensing.PUBLIC_KEY_BYTES =
      [48, -126, 1, -72, 48, -126, 1, 44, 6, 7, 42, -122, 72, -50, 56, 4, 1, 48, -126, 1, 31, 2, -127, -127, 0, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 2, 21, 0, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 2, -127, -127, 0, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 3, -127, -123, 0, 2, -127, -127, 0, -44, 17, 125, 75, -80, 15, -42, 43, -13, 50, 52, -17, -8, 66, 59, -105, -13, -126, 108, 24, -73, 85, 3, -93, 119, -25, -42, -26, 51, -95, -95, -28, 48, -42, 66, 123, -34, 127, 73, -103, -43, 81, 88, 125, -32, -74, 105, -76, 110, -84, -61, 66, 90, 33, -128, 48, -67, 115, -96, -36, 102, 110, -124, -55, 98, -98, 21, -77, -76, 62, -56, 30, 75, 61, -53, 12, 82, 43, 53, 60, 14, -80, -107, 116, -63, 29, -43, 2, -77, -71, -113, -10, 74, 19, -105, 7, -32, -56, 70, -2, 17, -27, 53, -85, -49, 56, 107, 56, -122, 67, 70, -31, 118, -33, -93, 43, -47, 31, -24, -37, 94, -114, -43, 20, 44, 82, 46, 7]
  }

  static {
    TestLicensing.PROPER_SIGNATURE =
      [48, 44, 2, 20, 85, 49, 35, -115, -17, 86, 110, 94, 25, 112, 41, 104, -57, 85, 20, 117, -108, -103, 60, 54, 2, 20, 87, -29, 47, 111, 120, 92, 29, -40, 115, -110, -116, -65, -41, 21, -3, 81, 99, -91, 67, 15]
  }

  @Test
  public void testVerifyValidSignatureWithPublicIteegoKey() {
    // The next call should NOT generate an exception.
    LicenseHandler.validateSignature( TestLicensing.PROPER_LICENSE, TestLicensing.PUBLIC_KEY_BYTES, TestLicensing.PROPER_SIGNATURE )
  }


  @Test( expected=java.security.SignatureException.class )
  public void testVerifyWrongSignatureWithPublicIteegoKey() {
    byte[] wrongSignature = [1, 1, 1, 1, 1, 1, 1, 1, -74, 1, 73, -41, -13, 52, 81, -84, -86, -106, 45, -68, -111, 84, 44, 0, 2, 20, 120, -122, -106, -69, 127, 75, 47, -89, 10, 9, 113, 114, 47, 31, -78, 3, 20, -12, -4, 92]

    // The next call SHOULD generate an exception.
    LicenseHandler.validateSignature( TestLicensing.PROPER_LICENSE, TestLicensing.PUBLIC_KEY_BYTES, wrongSignature )
  }



  @Test( expected=java.security.spec.InvalidKeySpecException.class )
  public void testVerifyValidSignatureWithWrongPublicIteegoKey() {
    byte[] keyInWrongFormat = [2, 2, 2, 2, 2, 2, 2, 2, 6, 7, 42, -122, 72, -50, 56, 4, 1, 48, -126, 1, 31, 2, -127, -127, 0, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 2, 21, 0, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 2, -127, -127, 0, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 3, -127, -123, 0, 2, -127, -127, 0, -44, 17, 125, 75, -80, 15, -42, 43, -13, 50, 52, -17, -8, 66, 59, -105, -13, -126, 108, 24, -73, 85, 3, -93, 119, -25, -42, -26, 51, -95, -95, -28, 48, -42, 66, 123, -34, 127, 73, -103, -43, 81, 88, 125, -32, -74, 105, -76, 110, -84, -61, 66, 90, 33, -128, 48, -67, 115, -96, -36, 102, 110, -124, -55, 98, -98, 21, -77, -76, 62, -56, 30, 75, 61, -53, 12, 82, 43, 53, 60, 14, -80, -107, 116, -63, 29, -43, 2, -77, -71, -113, -10, 74, 19, -105, 7, -32, -56, 70, -2, 17, -27, 53, -85, -49, 56, 107, 56, -122, 67, 70, -31, 118, -33, -93, 43, -47, 31, -24, -37, 94, -114, -43, 20, 44, 82, 46, 7]

    // The next call SHOULD generate an exception.
    LicenseHandler.validateSignature( TestLicensing.PROPER_LICENSE, keyInWrongFormat, TestLicensing.PROPER_SIGNATURE )
  }


  @Test( expected=Exception.class )
  public void testVerifyValidSignatureWithCorrectOtherKey() {
    byte[] someOtherKey = [48, -126, 1, -73, 48, -126, 1, 44, 6, 7, 42, -122, 72, -50, 56, 4, 1, 48, -126, 1, 31, 2, -127, -127, 0, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 2, 21, 0, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 2, -127, -127, 0, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 3, -127, -124, 0, 2, -127, -128, 22, -63, -51, -125, 101, -20, 88, -14, 51, -79, -6, 61, -79, 84, -64, -113, -62, 79, 76, 30, -1, -87, 16, -70, -96, -11, 8, 61, -106, -76, 71, -104, 12, 125, 91, 89, 73, -10, -96, 16, 111, 65, 95, 87, 123, 109, -78, 108, -126, 99, 83, -119, 113, 28, 86, -66, 52, -35, 99, 123, 109, -3, -95, -101, -33, 42, -101, -89, 73, -47, 36, -35, 49, -54, -29, -119, -10, 103, 43, 10, -28, -5, -53, 115, -84, -9, 43, 90, 89, -34, 95, -107, 39, -103, -50, -88, 99, -59, -122, -102, 13, -71, 95, -118, -110, 29, -62, 45, 72, -5, -127, 3, -93, 6, 94, 32, 73, 26, 93, -46, -72, -31, 4, -48, -50, -30, 120, 121]

    // The next call SHOULD generate an exception (thrown by ourselves).
    LicenseHandler.validateSignature( TestLicensing.PROPER_LICENSE, someOtherKey, TestLicensing.PROPER_SIGNATURE )
  }


  @Test
  public void testStringToHexStringEncodingAndBack() {
    String original = "some text"

    char[] encoded = LicenseHandler.encode( original )
    String stringValue = new String( encoded )
    Assert.assertEquals(
            "Encoding text '$original' to hex failed.",
            "736F6D652074657874",
            stringValue )

    byte[] decoded = LicenseHandler.decode( encoded )
    Assert.assertArrayEquals(
            "Decoding hex string '$stringValue' (original '$original') failed.",
            [115, 111, 109, 101, 32, 116, 101, 120, 116] as byte[],
            decoded )
  }
}
