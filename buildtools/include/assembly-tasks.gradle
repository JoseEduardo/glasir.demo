import com.iteego.glasir.build.tasks.*

String getAllEnvironmentModules() {
  glasir.modules.collect { it.name }.findAll { it.startsWith('env.') || it == 'env' }.sort().join(" ")
}

task atgCoreSqlInstallationOrder << {
  description = "Displays build/install/sql ordering for ATG core modules."
  printAtgCoreSqlInstallationOrder()
}

task assembleReleaseEar(type: AtgAssemblerTask, description: "Runs a build and assembles a release ear") {
  dependsOn = ["clean", "build"]

  modules = allEnvironmentModules
  outputFile = bigEar
  standalone = true
  liveconfig = true
  pack = true
  
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  
  searchRootDirs = files("$atgRoot", "$globalDir", "$globalDir/packages", "$globalDir/packages/modules/glasir")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      //TODO: Fix the config/atg dir structure for release ears
      file("${globalDir}/config/atg").eachDir { from it }
      into "${bigEar.canonicalPath}.exploded/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleDevEar(type: AtgAssemblerTask, description: "Runs a build and assembles a development ear") {
  dependsOn "build"
  
  modules = allEnvironmentModules
  outputFile = file("$jBossRoot/server/$storeServerName/deploy/${bigEarName}")
  standalone = true
  liveconfig = false
  pack = false
  extraClasspath = files("${globalDir}/buildtools/gradle-lib/dtds.jar")
  loggingDebug = false
  
  //TODO: Figure out if there is a clean way of making the atg assembler find all the required stuff
  searchRootDirs = files("$atgRoot", "$globalDir", "$globalDir/packages", "$globalDir/packages/modules/glasir")
}

task syncStoreEar(type: Copy) {
//  from bigEar
//  into "$jBossRoot/server/$storeServerName/deploy/${bigEarName}"
}

task syncAdminEar(type: Copy) {
  from "$jBossRoot/server/$storeServerName/deploy/${bigEarName}"
  into "$jBossRoot/server/$adminServerName/deploy/${bigEarName}"
}

task syncStoreServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  from("$jBossRoot/server/default")
  from "$globalDir/config/jboss/store/dev"
  into "$jBossRoot/server/$storeServerName"
}

task syncAdminServer(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  from "$jBossRoot/server/default"
  from "$globalDir/config/jboss/admin/dev"
  into "$jBossRoot/server/$adminServerName"
}

task syncDocRoot(type: Copy) {
    from docRoot
    into "$jBossRoot/server/${storeServerName}/deploy/ROOT.war"
}

task syncAtgServers(type: Copy) {
    from "${globalDir}/config/atg"
    into "$jBossRoot/ATG-Data/servers"
}

task syncStore(dependsOn: [syncStoreEar, syncStoreServer, syncDocRoot])

task syncAdmin(dependsOn: [syncAdminEar, syncAdminServer])

task devDeploy {
  description = "Compile, test, assemble, and deploys the dev ear to jboss"  
  dependsOn = [assembleDevEar, syncStore, syncAdmin, syncAtgServers]
}


def atgServers() {
    def servers = []
    file("${globalDir}/config/atg").eachDir {
        servers << it
    }
    servers
}

devDeploy << {

    def os = System.getProperty("os.name")
    if (!os.startsWith("Windows")) {
        def mainAppDir = new File("${globalDir}/glasir-app")

        // Link all top-level application modules from source tree
        def destinationDir = "$jBossRoot/server/${storeServerName}/deploy/${bigEarName}/atg_bootstrap.war/WEB-INF/ATG-INF"
        glasir.topModules.each {
            def linkName = "${destinationDir}/${it.name}"
            glasir.deleteDir(linkName)
            ant.symlink( link: linkName, resource: it.dir, overwrite: true)
        }

        // Link all war webapp folders from source tree
        destinationDir = "$jBossRoot/server/${storeServerName}/deploy/${bigEarName}"
        glasir.webModules.each { m ->
            m.manifest.atgWebModuleAsList.each {
                File moduleDir = file("${m.dir}/${it}")
                def linkName="$destinationDir/${moduleDir.name}"
                glasir.deleteDir(linkName)
                ant.symlink( link: linkName, resource: moduleDir, overwrite: true)
            }
        }

        // Link all atg server directories from source tree
        destinationDir = "$jBossRoot/ATG-Data/servers"
        atgServers().each {
            def linkName="$destinationDir/${it.name}"
            glasir.deleteDir(linkName)
            ant.symlink( link: linkName, resource: it, overwrite: true)
        }
    }

}

task cleanLocalDatabase(dependsOn: ['clean']) << {
  description = "Cleans out the local database, if any"
  glasir.deleteDir(databaseDir)
}

task cleanJbossServers(dependsOn: ['clean']) << {
  description = "Cleans out the jboss server dirs"
  glasir.deleteDir("$jBossRoot/server/${storeServerName}")
  glasir.deleteDir("$jBossRoot/server/${adminServerName}")
  glasir.deleteDir("$jBossRoot/ATG-Data")
}

task cleanAll(dependsOn: ['clean','cleanJbossServers','cleanLocalDatabase']) << {
  description = "Cleans out all the 'build' directories in the source tree, the jboss server dirs and the local database, if any"
}
