import com.iteego.glasir.build.api.tasks.*
import com.iteego.glasir.util.Chronograph

buildscript { 
  repositories             RepositoryConfigurator
  dependencies             DependencyConfigurator
  configurations.classpath ResolutionConfigurator
}

/*
Starts a h2 instance in the gradle java process. It starts the instance 
in a mode where the connecting url creates the database if it doesn't already 
exists. Example connection URLS:
 
Example url pattern for connecting to the database instance
started by the below task:

jdbc:h2:tcp://localhost/<database_name>

as in:

jdbc:h2:tcp://localhost/glasir_pub
*/
task startDatabase(type: H2) {
  baseDir databaseDir
  tcpAllowOthers true
  tcp true     //default, here for clarity. Starts the db server
  tcpPort 9092 //default, here for clarity
  web true     //starts the web console`
  webPort 9093
  //http://www.h2database.com/javadoc/org/h2/constant/SysProperties.html#h2.serverCachedObjects
  System.properties['h2.serverCachedObjects'] = '2048'
}

task startDbAndSleep( dependsOn: 'startDatabase') {
  doLast {sleep(1800000)}
 }

/*
You can invoke any specific flavor of the "env.store.dev" module by adding the parameter
  "-Pflavor=FlavorName" or "--project-prop flavor=FlavorName"
To your "gradle startDevStore" command. Usually, module flavors are used for different database types,
  for example, use "gradle startDevStore -Pflavor=oracle" to bypass the default h2 database choice.
*/
task startDevStore(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
    jBossHome     jBossRoot
    serverName    storeServerName
    modules       moduleWithFlavors("env.Main.store.dev")
    glasirDevMode true

    doFirst {
        println "Starting dev store node with modules: ${modules}"
    }
}

task startDevStoreAsync(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
    jBossHome     jBossRoot
    serverName    storeServerName
    modules       moduleWithFlavors("env.Main.store.dev")
    glasirDevMode true
    async         true

    doFirst {
        println "Starting dev store node with modules: ${modules}"
    }
}


task ensureStoreJBossStarted(type: Tail, dependsOn: startDevStoreAsync) {   
  doFirst { 
    println "JBoss spawned in a separate process, tailing log..."
    println ""
  }
  
  file "$jBossRoot/server/$storeServerName/log/server.log"
  timeoutMillis     120000
  failOn            regex: ".*writing desk.*", postFireTailPeriod: '1000 milliseconds'
  succeedOn         regex: 'JBoss.*Started in .*', postFireTailPeriod: '300 milliseconds'
  tailFromFileStart false

  doLast { 
    println ""
  }  
}

project(":Main:Storefront").htmlunitTest.mustRunAfter ensureStoreJBossStarted

project(":Main:Storefront").htmlunitTest.doFirst { 
  println ""
  println "> Executing functional geb tests"
}

project(":Main:Storefront").htmlunitTest.doLast { 
  println "> Functional test execution completed"
  println ""
}

task signalStoreJBossToStop(type: StopJBossInstance, dependsOn: [ensureStoreJBossStarted, project(":Main:Storefront").htmlunitTest]) {
  doFirst { println "" }
  
  jBossHome jBossRoot
  hostName  "0.0.0.0"
  jnpPort   3099
  username  "admin"
  password  "admin"

  doLast { println "" }
}

task ensureStoreJBossStopped(type: Tail, dependsOn: signalStoreJBossToStop) {     
  file "$jBossRoot/server/$storeServerName/log/server.log"
  timeoutMillis     30000
  succeedOn         regex: '.*Shutdown complete', postFireTailPeriod: '300 milliseconds'
  tailFromFileStart false
}

task executeFunctionalTests(dependsOn: [ensureStoreJBossStopped]) {
}

task startDevStoreTarget(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
    jBossHome     jBossRoot
    serverName    storeServerName
    modules       moduleWithFlavors("env.Main.store-target.dev")
    glasirDevMode false

    doFirst {
        println "Starting dev store publishing target node with modules: ${modules}"
    }
}

/*
You can invoke any specific flavor of the "env.admin.dev" module by adding the parameter
  "-Pflavor=FlavorName" or "--project-prop flavor=FlavorName"
To your "gradle startDevStore" command. Usually, module flavors are used for different database types,
  for example, use "gradle startDevAdmin -Pflavor=oracle" to bypass the default h2 database choice.
*/
task startDevAdmin(type: RunAtgOnJBoss, dependsOn: [startDatabase]) {
  jBossHome     jBossRoot
  serverName    adminServerName
  modules       moduleWithFlavors("env.Main.admin.dev")
  glasirDevMode false
  
  doFirst { 
    println "Starting dev admin node with modules: ${modules}"
  }
}

/* Ugly workaround to make stop tasks work */
task stopStore << {
    def shellScript = file("${jBossRoot}/bin/shutdown.sh")
    ant.chmod file: shellScript, perm: 'ug+xr'

    proc = "$shellScript -s jnp://localhost:3099 -u admin -p admin".execute()
    proc.waitFor()
}

task stopAdmin << {
    def shellScript = file("${jBossRoot}/bin/shutdown.sh")
    ant.chmod file: shellScript, perm: 'ug+xr'

    proc = "$shellScript -s jnp://localhost:1099 -u admin -p admin".execute()
    proc.waitFor()
}

/* This is what the stop tasks SHOULD look like
task stopAdmin(type: StopJBossInstance, dependsOn: []) {
    jBossHome     jBossRoot
    serverName    adminServerName
    jnpPort       1099
}
*/

def moduleWithFlavors(String module) {
  String result = module
  if (project.hasProperty('flavor')) {
    result += ".${project.flavor}"      
  }
  
  result
}
