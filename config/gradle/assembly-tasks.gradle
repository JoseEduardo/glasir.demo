import com.iteego.glasir.build.tasks.*
import com.iteego.glasir.build.api.tasks.*

repositories {
  maven {
    credentials.username artifactoryReader
    credentials.password artifactoryReaderPwd
    url "$artifactoryReaderUrl/glasir"
  }
}

configurations.add('entityresolver') 
dependencies { 
  entityresolver 'com.iteego.glasir:glasir.entityresolver:1.0'
}

String getAllEnvironmentModules() {
  glasir.model.modules.collect { it.name }.findAll { it.startsWith('node.') || it == 'node' }.sort().join(" ")
}

task atgCoreSqlInstallationOrder << {
  description = "Displays build/install/sql ordering for ATG core modules."
  printAtgCoreSqlInstallationOrder()
}

task assembleReleaseEar(type: AtgAssemblerTask, description: "Runs a build and assembles a release ear") {
  dependsOn "build", "copyAtgServers"
  //dependsOn "build"

  modules = allEnvironmentModules
  outputFile = bigEar
  standalone = true
  liveConfig = true
  pack = true
  
  searchRootDirs = files("$atgRoot", "$rootDir", "$rootDir/packages", "$rootDir/packages/modules/glasir")
  loggingDebug = false

  //doAfterAssembly is called after the ear is assembled (into an exploded stage dir)
  //but before the ear is packed
  doAfterAssembly {
    copy {
      file("${rootDir}/servers").eachDir { from new File( it, "atg" ) }
      into "${bigEar.canonicalPath}.exploded/atg_bootstrap.war/WEB-INF/ATG-INF/home/servers"
    }
  }
}

task assembleDevEar(type: AtgAssemblerTask, description: "Runs a build and assembles a development ear") {
  dependsOn "build", "copyAtgServers"
  //dependsOn "build"

  modules = allEnvironmentModules
  outputFile = bigEar
  virtualEarFile = file("$rootDir/build/glasir-commerce-ear.vfslink.properties")
  standalone = false
  runInPlace = true
  
  liveConfig = false
  pack = false
  loggingDebug = false
  glasirDevMode = true
  useInitializer = true
  
  //TODO: Figure out if there is a clean way of making the atg assembler find all the required stuff
  searchRootDirs = files("$atgRoot", "$rootDir", "$rootDir/packages", "$rootDir/packages/modules/glasir")

  // Make sure to first remove the ear file, so that the assembler does not try to write files into any folder
  // that contains symbolic links. If there would be any symbolic links in an already existing ear file,
  // the assembler would simply follow them and write into their destination directory, which in our case is
  // the source tree. By removing the ear file safely before starting the assembler, we avoid clobbering our
  // source tree with assembler output files.
  doFirst {
    glasir.deleteDir(bigEar)
  }
}

def getOnWindows () {
  System.properties['os.name'].toLowerCase().startsWith("windows")
}

task syncDocRoot(type: Copy) {
  from docRoot
  into "$jBossRoot/server/${storeServerName}/deploy/ROOT.war"
}

task copyJBossServers(type: Copy, description: "Creates a dev server setup in your jboss installation") {
  file("$rootDir/servers").eachDir { nodeDir -> 
    destinationDir = file("$jBossRoot/server")
    into(nodeDir.name) {
      from("$jBossRoot/server/default")
      from("$nodeDir/jboss") 
    }
    into("${nodeDir.name}/deploy") {
      from(assembleDevEar.virtualEarFile)
    }
    //doFirst {
    //  glasir.deleteDir("$jBossRoot/server/$nodeDir.name")
    //}
  }
}


task copyAtgServers(type: Copy) {
  file("$rootDir/servers").eachDir { nodeDir -> 
    destinationDir = file("$jBossRoot/ATG-Data/servers")
    into(nodeDir.name) {
      from("$nodeDir/atg") 
    }
    //doFirst {
    //  glasir.deleteDir("$jBossRoot/ATG-Data/servers/$nodeDir.name")
    //}
  }

  // Make sure to first remove the existing server directories, so that the copy task does not try to write files
  // into any folder that contains symbolic links. If there would be any symbolic links in an already existing
  // destination folder, the copy task would simply follow them and write into their target directory,
  // which in our case is the source tree. By removing the directories safely before starting the copy,
  // we avoid clobbering our source tree with build output files.
  //doFirst {
  //    glasir.deleteDir("$atgRoot/home/servers/$storeServerName")
  //    glasir.deleteDir("$atgRoot/home/servers/$adminServerName")
  //    //glasir.deleteDir("$jBossRoot/ATG-Data/servers/$storeServerName")
  //    //glasir.deleteDir("$jBossRoot/ATG-Data/servers/$adminServerName")
  //}
}

task devDeploy {
  description = "Compile, test, assemble, and deploys the dev ear to jboss"  
  dependsOn = [assembleDevEar, syncDocRoot, copyAtgServers, copyJBossServers]
  //dependsOn = [assembleDevEar, syncStore, syncAdmin, copyAtgServers]
}

def atgServers() {
  def servers = []
  file("${rootDir}/servers").eachDir {
    servers << new File( it, "atg" )
  }
  servers
}

devDeploy << {

  if (!onWindows && false) {
    def mainAppDir = new File("${rootDir}/glasir-app")

    // Link all top-level application modules from source tree
    def destinationDir = "$jBossRoot/server/${storeServerName}/deploy/${bigEarName}/atg_bootstrap.war/WEB-INF/ATG-INF"
    glasir.model.topModules.each {
      def linkName = "${destinationDir}/${it.name}"
      glasir.deleteDir(linkName)
      ant.symlink( link: linkName, resource: it.dir, overwrite: true)
    }

    // Link all war webapp folders from source tree
    destinationDir = "$jBossRoot/server/${storeServerName}/deploy/${bigEarName}"
    glasir.model.webModules.each { m ->
      m.manifest.atgWebModuleAsList.each {
        File moduleDir = file("${m.dir}/${it}")
        def linkName="$destinationDir/${moduleDir.name}"
        glasir.deleteDir(linkName)
        ant.symlink( link: linkName, resource: moduleDir, overwrite: true)
      }
    }

    // Copy all atg server directories from source tree
    // note that we cannot use symbolic linking for the atg servers
    // because when the nodes start up, they clobber those directories with ample run-time data
    // meaning we would get lots of runtime files into the source tree if we were to symlink instead of copy
    copy {
      file("${rootDir}/servers").eachDir { from new File(it,"atg") }
      into file("$jBossRoot/ATG-Data/servers")
    }
  }
}

task cleanLocalDatabase(dependsOn: ['clean']) << {
  description = "Cleans out the local database, if any"
  glasir.deleteDir(databaseDir)
}

task cleanJbossServers(dependsOn: ['clean']) << {
  description = "Cleans out the jboss server dirs"
  glasir.deleteDir("$jBossRoot/server/${storeServerName}")
  glasir.deleteDir("$jBossRoot/server/${adminServerName}")
  glasir.deleteDir("$jBossRoot/ATG-Data")
}

task cleanAll(dependsOn: ['clean','cleanJbossServers','cleanLocalDatabase']) << {
  description = "Cleans out all the 'build' directories in the source tree, the jboss server dirs and the local database, if any"
}
