/*
 * Copyright (C) 2011 Iteego Inc and Matias Bjarland <mbjarland@gmail.com>
 *
 * This file is part of Glasir, a Gradle build framework for ATG E-Commerce
 * projects created by Iteego Inc and Matias Bjarland.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

long stamp = System.currentTimeMillis()
defaultTasks 'assemble'

//project name is set in ../settings.gradle
version = "1.1.0-SNAPSHOT"
group = "com.iteego.glasir"
stamp = report(stamp, "init")

apply plugin: 'glasir.build'
stamp = report(stamp, "root.glasir.build")

apply from: 'include/environment.gradle'
stamp = report(stamp, "environment")

apply from: "include/sub-projects.gradle"
stamp = report(stamp, "sub-projects")

/*
apply plugin: 'artifactory'
artifactory {
  contextUrl =  artifactoryReaderUrl  
  resolve {
    repository {
      repoKey = 'glasir'
      username = artifactoryReader
      password = artifactoryReaderPwd
    }
  }     
}  
*/
stamp = report(stamp, "artifactory")

apply from: "include/assembly-tasks.gradle"
stamp = report(stamp, "assembly-tasks")

apply from: "include/jboss-tasks.gradle"
stamp = report(stamp, "jboss-tasks")

apply from: "include/rules.gradle"
stamp = report(stamp, "rules")

apply from: "include/atg-db-tasks.gradle"
//stamp = report(stamp, "atg-db-tasks")

apply from: "include/help.gradle"
//stamp = report(stamp, "help")

task none << {
  println "Hello World"
}

long report(long last, String name) {
  long current = System.currentTimeMillis()
  long delta = current - last
  
  println "===> $name took ${delta}ms"
  
  current  
}