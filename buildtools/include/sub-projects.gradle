/******************************************************************************
 * Gradle project and sub-project setup calls
 *****************************************************************************/

//the below is a list of test drivers for the geb web testing framework.
//a driver can emulate a specific browser and excercise the application UI.
//the htmlunit driver is a headless driver suitable for CI testing of the application UI
//See http://www.gebish.org/manual/current/configuration.html#driver_implementation
//for more details
//available drivers: htmlunit, firefox, ie, chrome, android                
drivers = ['htmlunit']

allprojects {
  apply plugin: 'glasir.build'

  //if (project != rootProject && !file("$projectDir/src").isDirectory()) {
  //
  if (project != rootProject && !file("$projectDir/src").isDirectory()) {    
    //configurations.add("default")    

    //
    //configurations.add("compile")    
    //configurations.add("testCompile")    
    return
  }
  apply plugin: 'groovy'
    
  dependencies {
    groovy "org.codehaus.groovy:groovy:1.7.10"

    testCompile "junit:junit:4.8.2", 
                "org.spockframework:spock-core:0.5-groovy-1.7",
                "org.codehaus.geb:geb-spock:0.6.1",
                "org.codehaus.geb:geb-junit4:0.6.1"

    drivers.each { driver ->
      testCompile "org.seleniumhq.selenium:selenium-${driver}-driver:2.9.0"
    }

    testRuntime "org.seleniumhq.selenium:selenium-support:2.9.0"
  }
  
  sourceCompatibility = "1.6"
  targetCompatibility = "1.6"
  
  compileJava {
    options.compilerArgs = ['-Xlint:deprecation'] //, '-Xlint:unchecked']
  }

  drivers.each { driver -> 
    task "${driver}Test"(type: Test) {
      isWebTest = true
      include '**/*GebSpec.class'
  
      testReportDir = file("$reportsDir/geb-tests")
      testResultsDir = file("$buildDir/geb-test-results/")
  
      systemProperty "geb.build.reportsDir", "$reportsDir/$name/geb"
      systemProperty "geb.env", driver
      
      //TODO: Externalize the below host/port configuration somehow
      systemProperty "geb.build.baseUrl", "http://localhost:10080"
    }  
  }
  
  jar  {
    //only create a jar file if we have some classes to jar up, 
    //to to this we check if the 'compileJava' task did any work (if so, we have something
    //to jar up). TODO: if we need to create resources-only jars, this needs changing
    onlyIf {
      compileJava.didWork || processResources.didWork || compileGroovy.didWork
    }

    // Change where the resulting jar will end up
    destinationDir = file("lib")
    baseName = 'classes'
  }

  test {
    exclude '**/*GebSpec.class'
  }

  clean << {
    ant.delete file: 'lib/classes.jar'
    if (!file('lib').listFiles()) {
      ant.delete dir: 'lib'
    }
  }  
}

subprojects {
  //set ivy/maven 'group' for the subproject, generated via a method call to glasir.build 
  //gradle plugin
  group = glasir.projectGroup
  //version = rootProject.version

  //if (!file("$projectDir/src").isDirectory()) return
  //println "Setting up classpaths for ${project.path}"
  if (!file("$projectDir/src").isDirectory()) return

  //configures dependencies for this project based on the atg MANIFEST.MF file
  //ATG-Required attribute values. Applies these dependencies to the configurations
  //given as the second argument
  glasir {
    atgDependencies {
      applyToConfigurations "compile", "testCompile"      
      verbose false
    }     
  }
  //setupAtgDependencies(project, ['compile', 'testCompile']) //, false, true) //the last true to turn on debugging 
}

task aggregateTestReports(type: TestReportAggregator) {
  //def buildDir = file("$projectDir/build")
  //def reportsDir = file("$buildDir/reports")
  //reportsDir.mkdirs()
  
  dependsOn getTasksByName('check', true)

  includeWebTests = false
  testReportDir = file("${reportsDir}/tests")
  testResultsDir = file("${buildDir}/test-results")
  projects = subprojects
  doLast {
    println "> "
    println "> Aggregated test report saved at $testReportDir/index.html"
    println "> "
  }    
}
build.dependsOn(aggregateTestReports)

gradle.projectsEvaluated { g ->
  build.dependsOn(getTasksByName('build', true) - build)
  clean.dependsOn(getTasksByName('clean', true) - clean)
}

class TestReportAggregator extends Copy {
  def projects
  File testResultsDir
  boolean includeWebTests = false
  
  @OutputDirectory
  File testReportDir
  
  def TestReportAggregator() {
    dependsOn { testTasks }
    from { inputTestResultDirs }
    into { testResultsDir }
  }

  @TaskAction
  def aggregate() {
    def report = new org.gradle.api.internal.tasks.testing.junit.report.DefaultTestReport(testReportDir: testReportDir, testResultsDir: testResultsDir)
    report.generateReport()
  }

  def getTestTasks() {
    def testTasks = projects.collect { it.tasks.withType(Test) }.flatten()
    
    //exclude web tests from the 
    includeWebTests ? testTasks : testTasks.findAll { !it.hasProperty('isWebTest') } 
  }

  def getInputTestResultDirs() {
    testTasks*.testResultsDir
  }
}